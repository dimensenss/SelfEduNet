@model SelfEduNet.ViewModels.EditLessonViewModel

@{
	Layout = "_AdminLayout";
	var currentStep = ViewData["Step"] as Step;
	ViewData["Mode"] = "Edit";
}
<link href="//vjs.zencdn.net/8.23.0/video-js.min.css" rel="stylesheet">
@section Sidebar
{
	@await Html.PartialAsync("_TeachSidebar", @Model.Course, ViewData)
}

<div class="row">
	<div class="d-flex pt-2 pb-4 flex-column" id="lesson-container" style="max-width:1000px;">

		@await Html.PartialAsync("EditLessonMode/_EditLessonContent", @Model)
	</div>
</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Додати крок</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-dialog__content">
				<div class="create-list">
					<h1 class="st-h1 plugins-list__header">
						Оберіть тип кроку
					</h1>

					<h2 class="st-h2 plugins-list__header" hidden="">
						Popular
					</h2>

					<ol class="plugins-list">
						<li class="plugins-list__item" role="button"
							name="add-step-@Model.Lesson.Id"
							data-lesson-id="@Model.Lesson.Id"
							data-step-type="1">

							<span class="svg-icon fs-1 me-3">
								<i class="fa-regular fa-file-lines"></i>
							</span>
							<div>
								<div class="plugin-list__item-title">
									Текст

									<!---->
								</div>
								<div class="plugin-list__item-descr">
									Текст з форматуванням, зображеннями, формулами
								</div>
							</div>
						</li>
						<li class="plugins-list__item" role="button"
							name="add-step-@Model.Lesson.Id"
							data-lesson-id="@Model.Lesson.Id"
							data-step-type="2">

							<span class="svg-icon fs-1 me-3">
								<i class="fa-solid fa-video"></i>
							</span>
							<div>
								<div class="plugin-list__item-title">
									Відео

									<!---->
								</div>
								<div class="plugin-list__item-descr">
									Завантажуйте відео
								</div>
							</div>
						</li>
						<li class="plugins-list__item" role="button"
							name="add-step-@Model.Lesson.Id"
							data-lesson-id="@Model.Lesson.Id"
							data-step-type="3">

							<span class="svg-icon fs-1 me-3">
								<i class="fa-solid fa-square-check"></i>
							</span>
							<div>
								<div class="plugin-list__item-title">
									Тест (задача)

									<!---->
								</div>
								<div class="plugin-list__item-descr">
									Виберіть відповід(ь, і) зі списку
								</div>
							</div>
						</li>
						<li class="plugins-list__item" role="button"
							name="add-step-@Model.Lesson.Id"
							data-lesson-id="@Model.Lesson.Id"
							data-step-type="4">

							<span class="svg-icon fs-1 me-3">
								<i class="fa-solid fa-code"></i>
							</span>
							<div>
								<div class="plugin-list__item-title">
									Завдання з програмування

									<!---->
								</div>
								<div class="plugin-list__item-descr">
									Напишіть програму, яку можна перевірити за допомогою stdin → stdout
								</div>
							</div>
						</li>
					</ol>
					<!---->
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрити</button>

			</div>
		</div>
	</div>
</div>

@section Scripts
{
	<script src="//vjs.zencdn.net/8.23.0/video.min.js"></script>
	<script src="~/js/youtubePlayer.js" asp-append-version="true"></script>
	<script src="~/js/ckeditorLessonContent.js" asp-append-version="true"></script>
	<script src="~/js/transcriptionPolling.js" asp-append-version="true"></script>
	<script>
		$(document).ready(function() {
		// Изначально показываем только выбранную секцию
		toggleUploadSections();

		// Обработчик переключения вариантов
		$('input[name="uploadType"]').change(function() {
			toggleUploadSections();
		});

		function toggleUploadSections() {
			if ($('#fileOption').is(':checked')) {
			$('#fileUploadSection').show();
			$('#linkUploadSection').hide();
			} else if ($('#linkOption').is(':checked')) {
			$('#fileUploadSection').hide();
			$('#linkUploadSection').show();
			}
		}
		});

	$(document).on("submit", "#fileUploadSection", function (event) {
		  event.preventDefault();

		  let form = $(this)[0];
		  let stepId = $(this).data("step-id");
		  let $loader = $("#loader");
		  let videoPlayer = $("#videoPlayer")[0];
		  let youtuberVideoPlayer = $("#youtubePlayerBox")[0];

		  // Показываем лоадер
		  $(videoPlayer).addClass('d-none');
		  $(youtuberVideoPlayer).addClass('d-none');
		  $loader.removeClass('d-none');

		  let formData = new FormData(form);
		  formData.append("id", stepId);
		  $.ajax({
			url: "@Url.Action("UploadVideo", "Step", new { area = "Teach" })",
			type: 'POST',
			data: formData,
			processData: false,
			contentType: false,
			success: function (response) {
			let videoPlayer = $("#videoPlayer")[0];
			const videoUrl = response.videoUrl;

			$loader.addClass('d-none');

			let $source = $(videoPlayer).find("source");
			$source.attr("src", videoUrl);
			$(videoPlayer).removeClass("d-none");
			videoPlayer.load();

			  $.notify({ message: response.message }, { type: 'success' });
			},
			error: function (xhr) {
			  const response = xhr.responseJSON;
			  // скрываем лоадер
				  $loader.addClass('d-none');
					  $(videoPlayer).removeClass('d-none');
					  $(youtuberVideoPlayer).removeClass('d-none');
			  $.notify({ message: response?.message || "Upload failed" }, { type: 'danger' });
			}
		  });
		});
			  $(document).on("submit", "#linkUploadSection", function (event) {
				  event.preventDefault();

				  let form = $(this);
				  let videoUrl = form.find('input[name="videoUrl"]').val();
				  let stepId = form.data("step-id");

				  let $loader = $("#loader");
				  let videoPlayer = $("#videoPlayer")[0];
				  let youtuberVideoPlayer = $("#youtubePlayerBox")[0];

				  // Показываем лоадер
				  $(videoPlayer).addClass('d-none');
				  $(youtuberVideoPlayer).addClass('d-none');
				  $loader.removeClass('d-none');

				  $.ajax({
					  url: "@Url.Action("UploadVideo", "Step", new { area = "Teach" })",
					  type: 'POST',
					  data: {
						  id: stepId,
						  videoUrl: videoUrl,
					  },
					  success: function (response) {
						$loader.addClass('d-none');
								$(youtuberVideoPlayer).removeClass("d-none");
							 updateYouTubePlayer(videoUrl);
						  $.notify({
							  message: response.message
						  }, {
							  type: 'success'
						  });
					  },
					  error: function (xhr, status, error) {
						  const response = xhr.responseJSON;
						  $.notify({
							  message: response.message
						  }, {
							  type: 'danger'
						  });
					  }
				  });
			  });
			$(document).on("click", 'button[name^="generateContext"]', function (event) {
				event.preventDefault();
				let stepId = $(this).data("step-id");
				const contextValue = $("#step-context").val().trim();
				const hasContext = contextValue.length > 0;
				if (hasContext){
						showConfirmationDialog(
						'У вас вже є контекст',
						'Ця перезапише існуючий контекст. Ви не зможете відновити його!',
						'Так, згенерувати!',
						'Відмінити',
						() => {
							$.ajax({
								url: "/Teach/Step/GenerateContext",
								type: 'POST',
								data: { id: stepId },
								success: function (response) {
									$.notify({ message: response.message }, { type: 'success' });
									ctxTaskId = response.taskId;
									if (ctxTaskId) startPollingContext(stepId, ctxTaskId);
								},
								error: function (xhr, status, error) {
									const response = xhr.responseJSON;
									$.notify({ message: response.message }, { type: 'danger' });
								}
							});
						}
					);
				}
				else
				{
					$.ajax({
						url: "/Teach/Step/GenerateContext",
						type: 'POST',
						data: { id: stepId },
						success: function (response) {
							$.notify({ message: response.message }, { type: 'success' });
							ctxTaskId = response.taskId;
							if (ctxTaskId) startPollingContext(stepId, ctxTaskId);
						},
						error: function (xhr, status, error) {
							const response = xhr.responseJSON;
							$.notify({ message: response.message }, { type: 'danger' });
						}
					});
				}
			});
			$(document).on("click", 'button[name^="generateResume"]', function (event) {
				event.preventDefault();
				let stepId = $(this).data("step-id");
				const resumeValue = $("#step-resume").val().trim();
					const hasResume = resumeValue.length > 0;
						if (hasResume){
						showConfirmationDialog(
						'У вас вже є резюме',
						'Ця перезапише існуюче резюме. Ви не зможете відновити його!',
						'Так, згенерувати!',
						'Відмінити',
						() => {
							$.ajax({
								url: "/Teach/Step/GenerateResume",
								type: 'POST',
								data: { id: stepId },
								success: function (response) {
									$.notify({ message: response.message }, { type: 'success' });
									ctxTaskId = response.taskId;
									if (ctxTaskId) startPollingResume(stepId, ctxTaskId);
								},
								error: function (xhr, status, error) {
									const response = xhr.responseJSON;
									$.notify({ message: response.message }, { type: 'danger' });
								}
							});
						}
					);
				}
				else
				{
					$.ajax({
						url: "/Teach/Step/GenerateResume",
						type: 'POST',
						data: { id: stepId },
						success: function (response) {
							$.notify({ message: response.message }, { type: 'success' });
							ctxTaskId = response.taskId;
							if (ctxTaskId) startPollingResume(stepId, ctxTaskId);
						},
						error: function (xhr, status, error) {
							const response = xhr.responseJSON;
							$.notify({ message: response.message }, { type: 'danger' });
						}
					});
				}
			});

			  $(document).on("click", 'button[name^="update-lesson-"]', function (event) {
				  event.preventDefault();
				  const formId = $(this).data('lesson-form-id').toString();
				  const moduleId = $(this).data('module-id').toString();

				  var form = $('#update-lesson-form-' + formId);
				  var title = form.find("input[name='Title']").val();
				  const lessonId = form.find("input[name='LessonId']").val() || null;

				  $.ajax({
					  url: "@Url.Action("CreateUpdateLesson", "Lesson", new { area = "Teach" })",
					  type: "POST",
					  data: {
						  moduleId: moduleId,
						  lessonId: lessonId,
						  title: title,
					  },
					  success: function (response) {
						  $.notify({
							  message: response.message
						  }, {
							  type: 'success'
						  });
						  renderModulesList();
					  },
					  error: function (xhr) {
						  const response = xhr.responseJSON;
						  $.notify({
							  message: response.message
						  }, {
							  type: 'danger'
						  });
						  console.log(xhr);
					  }
				  });
			  });

			  $(document).on("click", 'li[name^="add-step-"]', function (event) {
				  event.preventDefault();
				  const lessonId = $(this).data('lesson-id').toString();
				  const stepType = $(this).data('step-type').toString();
				  $.ajax({
					  url: "@Url.Action("AddStep", "Lesson", new { area = "Teach" })",
					  type: "POST",
					  data: {
						  lessonId: lessonId,
						  stepType: stepType,
					  },
					  success: function (response) {
						  const redirectUrl = `/EditLesson/@Model.Course.Id/${lessonId}?stepId=${response.stepId}`;
						  window.location.href = redirectUrl;
						  $.notify({
							  message: response.message
						  }, {
							  type: 'success'
						  });
					  },
					  error: function (xhr) {
						  const response = xhr.responseJSON;
						  $.notify({
							  message: response.message
						  }, {
							  type: 'danger'
						  });
						  console.log(xhr);
					  }
				  });
			  });

	</script>
}
