@model SelfEduNet.ViewModels.EditLessonViewModel

@{
	Layout = "_AdminLayout";
	ViewData["Mode"] = "View";
	ViewData["Title"] = @Model.Lesson.Title ?? "Перегляд уроку";
}

@section Sidebar
{
	@await Html.PartialAsync("_TeachSidebar", @Model.Course, ViewData)
}

<div class="row">

	<div class="d-flex pt-2 pb-4 flex-column" id="lesson-container" style="max-width:1000px;">
		@await Html.PartialAsync("ViewLessonMode/_ViewLessonContent", @Model)
	</div>
</div>


@section Scripts
{
	<script src="~/js/youtubePlayer.js" asp-append-version="true"></script>
	<script src="~/js/button-loading.js" asp-append-version="true"></script>

	<script>
		$(document).ready(function () {
			$(document).on("click", ".view-step", function (event) {
			event.preventDefault();

			const stepId = $(this).data("step-id");
			const isCompleted = $(this).data("step-is-completed") === "True";
			const isStepList = $(this).data("is-step-list");
			const isTest = $(this).data("is-test") === true || $(this).data("is-test") === "true";
			const isTestPassed = $(this).data("is-test-passed") === true || $(this).data("is-test-passed") === "true";
			const url = $(this).attr("href");

			if (isStepList) {
				viewStep(url);
				return;
			}

			if (isTest && !isTestPassed) {
				$.notify({
					message: 'Ви не можете перейти до наступного кроку, поки не пройдете тест.'
				}, {
					type: 'danger'
				});
				return;
			}

			checkViewedStep(stepId, function (isTextRead) {
				function proceedAfterSubmit() {
					viewStep(url);
					$('.step-id-' + stepId).addClass('completed');
					$('.step-id-' + stepId).attr("data-step-is-completed", "True");
				}

				if (!isTextRead) {
					showConfirmationDialog(
						'Ви впевнені?',
						'Ви хочете завершити крок, який ще не пройшли.',
						'Так!',
						'Відмінити',
						() => {
							if (!isCompleted) {
								submitStep(stepId, function () {
									proceedAfterSubmit();
								});
							} else {
								proceedAfterSubmit();
							}
						}
					);
				} else {
					if (!isCompleted) {
						submitStep(stepId, function () {
							proceedAfterSubmit();
						});
					} else {
						proceedAfterSubmit();
					}
				}
			});
		});
			window.onpopstate = function () {
				location.reload();
			};
			$(window).on("scroll", function () {
				let scrollTop = $(window).scrollTop();
				let windowHeight = $(window).height();
				let documentHeight = $(document).height();
				var urlParams = new URLSearchParams(window.location.search);

				if (scrollTop + windowHeight >= documentHeight - 10) {
					var stepId = urlParams.get('stepId');
					setTextViewed(stepId);
					$(window).off("scroll");
				}
			});
			function viewStep(url){
				$.ajax({
					url: url,
					type: "GET",
					success: function (response) {
						$("#lesson-container").html(response);
						history.pushState(null, "", url);
					},
					error: function () {
						$("#lesson-container").html("<p class='text-danger'>Помилка завантаження даних</p>");
					}
				});
			}
			function checkViewedStep(stepId, callback) {
				$.ajax({
					url: "@Url.Action("CheckViewedStep", "Step", new { area = "Teach" })",
					type: "POST",
					data: { id: stepId },
					success: function (response) {
						callback(true);
					},
					error: function () {
						callback(false);
					}
				});
			}
			function setTextViewed(stepId){
				$.ajax({
					url: "@Url.Action("SetViewedStep", "Step", new { area = "Teach" })",
					type: "POST",
					data: {
						id: stepId,
					},
					success: function (response) {
						return true;
					},
					error: function (xhr) {
						console.log(xhr);
					}
				});
			}
			function submitStep(stepId, callback) {
				$.ajax({
					url: "@Url.Action("SubmitStep", "Step", new { area = "Teach" })",
					type: "POST",
					data: { id: stepId },
					success: function (response) {
						$.notify({ message: response.message }, { type: 'success' });
						if (callback) callback(null, response);
					},
					error: function (xhr) {
						$.notify({ message: xhr.responseText || "Помилка під час відправлення!" }, { type: 'danger' });
						if (callback) callback(xhr, null);
					}
				});
			}

			$(document).on("click", 'button[name^="get-user-answers"]', function (event) {
				event.preventDefault();
				const $button = $(this);
				let stepId = $(this).data("step-id");
				
				showLoading($button);
				$.ajax({
					url: "/Teach/StepTest/GetUserAnswers",
					type: 'POST',
					data: { id: stepId },
					success: function (response) {
						hideLoading($button);
						$.notify({message: response.message}, {type: 'success'});
						
						window.location.href = response.redirectUrl;
					},
					error: function (xhr, status, error) {
						const response = xhr.responseJSON;
						hideLoading($button);
						$.notify({ message: response.message }, { type: 'danger' });
					}
				});
			});
		});
	</script>
}
