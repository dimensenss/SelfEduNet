@{
	Layout = "_Layout";
}
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SelfEduNet.ViewModels.CourseCatalogViewModel

<div class="marco-layout">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-3 border-end ">
				<div class="d-flex flex-column sticky-top stick-filter d-none d-md-flex">
					@Html.Partial("_FiltersForm", new { form_type = "desktop" })
				</div>
			</div>

			<div class="col-md-9">
				<div class="catalog-main-content">
					<div class="catalog-search-bar">
						<div class="d-flex flex-row justify-content-center align-items-center catalog-search-form">
							<form method="get" class="search-form d-flex align-items-center flex-fill"
								  asp-action="SearchCatalog"
								  id="courses-search-form-main">
								<div class="input-group flex-fill me-3">
									<span class="input-group-text">
										<i class="fa-solid fa-magnifying-glass"></i>
									</span>
									<input type="text" name="Query" placeholder="Пошук..."
										   class="form-control search-input" value="@(Model?.Filter?.Query ?? "")">
								</div>
								<div class="d-none d-md-flex">
									<button class="button-3 flex-fill me-3">Пошук</button>
								</div>
								<div class="d-flex d-md-none">
									<button class="filters-btn" type="button" data-bs-toggle="offcanvas"
											data-bs-target="#offcanvasWithBothOptions"
											aria-controls="offcanvasWithBothOptions">
										<i class="fa-solid fa-filter"></i>
									</button>
								</div>
							</form>
						</div>
					</div>
					<div class="row">
						<div class="active-filters d-flex flex-wrap mb-3">
							<!-- Filter display will go here -->
						</div>
					</div>
					<div class="row">
						<div class="col-12">
							<div class="courses-list">
								@Html.Partial("_GetCoursesWithFilter")
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="offcanvas offcanvas-start" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions"
     aria-labelledby="offcanvasWithBothOptionsLabel">
	<div class="offcanvas-header">
		<h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Фільтри</h5>
		<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
	</div>
	<div class="offcanvas-body">
		@Html.Partial("_FiltersForm", new { form_type = "mobile" })
	</div>
</div>
@section Scripts {
	<script>

	$(document).ready(function () {

		document.getElementById('catalog-search-form-desktop').addEventListener('submit', function () {
			const mainQuery = document.querySelector('#courses-search-form-main input[name="Query"]').value;
			document.getElementById('filters-hidden-query').value = mainQuery;
		});
				
		const $filterForms = $('#catalog-search-form-main, #catalog-search-form-desktop, #catalog-search-form-mobile');

		function getParamsFromForms() {
			const formData = $filterForms.serializeArray();
			const params = new URLSearchParams();

			formData.forEach(({ name, value }) => {
				if (value && value !== '0') {
					params.set(name, value);
				}
			});

			// Чекбоксы
			$filterForms.find('input[type="checkbox"]').each(function () {
				if (this.checked && !params.has(this.name)) {
					params.set(this.name, this.value);
				}
			});

			return params;
		}

		function applyFilters(params, shouldSync = true) {
			const url = '/Catalog/GetCoursesWithFilter';

			$.ajax({
				url: url,
				data: params.toString(),
				method: 'GET',
				success: function (html) {
					$('.courses-list').html(html);
					updateActiveFilters(params);
					updateBrowserUrl(params);
					if (shouldSync) {
						syncFormsWithParams(params); // вызываем только если надо
					}
				},
				error: function () {
					alert('Помилка при завантаженні курсів.');
				}
			});
		}

		function syncFormsWithParams(params) {
			$filterForms.each(function () {
				const $form = $(this);

				// Очистить все поля (text, select)
				$form.find('input[type="text"]').val('');
				$form.find('input[type="number"]').val('');
				$form.find('select').val('');
				$form.find('input[type="checkbox"]').prop('checked', false);

				// Применить значения из params
				params.forEach((value, key) => {
					const $input = $form.find(`[name="${key}"]`);

					if ($input.length > 0) {
						if ($input.attr('type') === 'checkbox') {
							$input.each(function () {
								if ($(this).val() == value) {
									$(this).prop('checked', true);
								}
							});
						} else {
							$input.val(value);
						}
					}
				});
			});
		}

		function updateActiveFilters(params) {
			const $container = $('.active-filters');
			$container.empty();

			params.forEach((value, key) => {
				if (key === 'Page') return;

				if (!value || value.trim() === '' || value === '0') {
					return;
				}

				const $input = $filterForms.find(`[name="${key}"]`);
				if ($input.length === 0) return;

				let label = '';

				// Специальная обработка селектов
				if ($input.is('select')) {
					const selectedText = $input.find(`option[value="${value}"]`).first().text().trim();
					label = selectedText;
				}
				// Ценовые фильтры
				else if (key === 'MinPrice' || key === 'MaxPrice') {
					const labelPrefix = $input.data('btn-label') || (key === 'MinPrice' ? 'Ціна від' : 'Ціна до');
					label = `${labelPrefix}: ${value}`;
				}
				// Все остальные
				else {
					label = $input.data('btn-label') || value;
				}

				const $btn = $(`<button class="button-4 m-0 me-2 mb-2" style="height: 38px">${label} ✕</button>`);
				$btn.on('click', function () {
					params.delete(key);
					params.set('Page', 1);
					applyFilters(params);
				});

				$container.append($btn);
			});
		}



		function updateBrowserUrl(params) {
			const newUrl = `${window.location.pathname}?${params.toString()}`;
			window.history.replaceState({}, '', newUrl);
		}

		// Обработка форм
		$filterForms.on('submit change', function (e) {
			e.preventDefault();
			const params = getParamsFromForms();
			params.set('Page', 1);
			applyFilters(params, false); // ← НЕ синхронизируем форму!
		});

		// Пагинация
		$(document).on('click', '.pagination a', function (e) {
			e.preventDefault();
			const page = $(this).text().trim();
			const params = new URLSearchParams(window.location.search);
			params.set('Page', page);
			applyFilters(params);
		});

		// Инициализация при загрузке
		const initialParams = new URLSearchParams(window.location.search);
		updateActiveFilters(initialParams);
		syncFormsWithParams(initialParams);
		applyFilters(initialParams);


	});
</script>
}